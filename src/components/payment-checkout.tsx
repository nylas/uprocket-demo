/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/5eWPjLLYpMY
 */
import Link from 'next/link'
import {
  CardTitle,
  CardHeader,
  CardContent,
  Card,
  CardDescription,
  CardFooter,
} from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import {
  SelectValue,
  SelectTrigger,
  SelectItem,
  SelectContent,
  Select,
} from '@/components/ui/select'
import { Button } from '@/components/ui/button'
import { Checkbox } from '@/components/ui/checkbox'
import {
  useConfirmedBookingDetails,
  useConfirmedTimeslot,
  usePreBookedEventDetails,
} from '@/lib/hooks'
import { useRouter } from 'next/router'
import { useToast } from './toast'
import { FormEvent, useEffect, useState } from 'react'
import { formatDuration, getDurationInMinutes } from '@/lib/utils'
import { DURATIONS_AND_PRICES } from '@/lib/constants'

export function PaymentCheckout() {
  const router = useRouter()
  const { confirmedTimeslot } = useConfirmedTimeslot()
  const { preBookedEventDetails } = usePreBookedEventDetails()
  const { setConfirmedBookingDetails } = useConfirmedBookingDetails()
  const { addToast } = useToast()
  const [cardSaved, setCardSaved] = useState(false)
  const [confirmInProgress, setConfirmInProgress] = useState(false)
  const [duration, setDuration] = useState(0)
  const [price, setPrice] = useState(0)

  // Form state
  const [cardNumber, setCardNumber] = useState('')
  const [firstName, setFirstName] = useState('')
  const [lastName, setLastName] = useState('')
  const [expirationMonth, setExpirationMonth] = useState('')
  const [expirationYear, setExpirationYear] = useState('')
  const [securityCode, setSecurityCode] = useState('')
  const [country, setCountry] = useState('')
  const [addressLine1, setAddressLine1] = useState('')
  const [addressLine2, setAddressLine2] = useState('')
  const [city, setCity] = useState('')
  const [postalCode, setPostalCode] = useState('')

  // Redirect to home if no timeslot is confirmed
  if (!confirmedTimeslot) {
    router.push('/')
    return null
  }

  // Validation function
  const validateForm = () => {
    if (
      !cardNumber ||
      !firstName ||
      !lastName ||
      !expirationMonth ||
      !expirationYear ||
      !securityCode ||
      !country ||
      !addressLine1 ||
      !city ||
      !postalCode
    ) {
      addToast('Validation Error', 'All fields are required', 'error')
      return false
    }
    // Add additional validation rules here
    return true
  }

  // Form submission handler
  const handleSave = async (e: FormEvent) => {
    e.preventDefault()
    if (!validateForm()) {
      return
    }
    setCardSaved(true)
  }

  const handleConfirmAndFund = async () => {
    setConfirmInProgress(true)
    if (!cardSaved) {
      addToast('Validation Error', 'Please save your card details first', 'error')
      setConfirmInProgress(false)
      return
    }
    if (!confirmedTimeslot || !confirmedTimeslot.timeslot) {
      addToast('No confirmed timeslot', 'Please go back and select a timeslot', 'error')
      setConfirmInProgress(false)
      return
    }
    if (preBookedEventDetails) {
      const bookingId = preBookedEventDetails.id

      try {
        const response = await fetch(`/api/booking/${bookingId}/confirm`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            contractorId: confirmedTimeslot.contractorId,
          }),
        })
        const responseData = await response.json()
        if (responseData.error) {
          addToast('Error', responseData.error, 'error')
          setConfirmInProgress(false)
          return
        }
        setConfirmedBookingDetails(responseData?.data)
        setConfirmInProgress(false)
        router.push('/confirmation')
        return
      } catch (error: any) {
        addToast('Error', error.message, 'error')
        setConfirmInProgress(false)
        return
      }
    }
    setConfirmInProgress(false)
  }

  useEffect(() => {
    if (preBookedEventDetails && preBookedEventDetails.booking_data) {
      const duration = getDurationInMinutes(
        new Date(preBookedEventDetails.booking_data.start_time * 1000),
        new Date(preBookedEventDetails.booking_data.end_time * 1000)
      );
      setDuration(duration);
      setPrice(DURATIONS_AND_PRICES.find((d) => d.duration === duration)?.price || 5);
    }
  });

  return (
    <div className='max-w-7xl mx-auto my-8 p-4'>
      <div className='flex justify-between'>
        <div className='w-2/3 p-4 space-y-6'>
          <div className='text-sm'>
            <Link className='text-blue-600 hover:underline' href='/contractors'>
              Back to project details
            </Link>
          </div>
          <div>
            <h1 className='text-2xl font-semibold'>Checkout</h1>
          </div>
          <Card className='w-full'>
            <CardHeader>
              <CardTitle>Add a billing method</CardTitle>
            </CardHeader>
            <CardContent>
              {cardSaved ? (
                <div className='space-y-4'>
                  <div className='flex items-center justify-between'>
                    <div className='flex items-center space-x-2'>
                      <CreditCardIcon className='h-6 w-6 text-apple-500' />
                      <span className='text-sm'>
                        Visa ending in {cardNumber.substring(cardNumber.length - 4)}
                      </span>
                    </div>
                    <Button variant='outline' onClick={() => setCardSaved(false)}>
                      Edit
                    </Button>
                  </div>
                  <div className='flex items-center justify-between'>
                    <span className='text-sm'>
                      Expires {expirationMonth}/{expirationYear}
                    </span>
                    <span className='text-sm'>{country}</span>
                  </div>
                  <div className='flex items-center justify-between'>
                    <span className='text-sm'>
                      {firstName}&nbsp;{lastName}
                    </span>
                    <span className='text-sm'>
                      {city},&nbsp;{postalCode}
                    </span>
                  </div>
                </div>
              ) : (
                <form className='space-y-4' onSubmit={handleSave}>
                  <div className='flex items-center space-x-2'>
                    <CreditCardIcon className='text-apple-500' />
                    <span className='text-sm text-gray-600'>Payment card</span>
                    <span className='text-xs text-gray-500'>
                      Visa, Mastercard, American Express, Discover, Diners
                    </span>
                    <Badge variant='secondary'>Securely stored</Badge>
                  </div>
                  <div className='grid grid-cols-2 gap-4'>
                    <Input
                      placeholder='Card number'
                      onChange={(e) => setCardNumber(e.target.value)}
                    />
                    <Input
                      placeholder='First name'
                      onChange={(e) => setFirstName(e.target.value)}
                    />
                    <Select onValueChange={(value: string) => setExpirationMonth(value)}>
                      <SelectTrigger id='expiration-month'>
                        <SelectValue placeholder='Expiration month' />
                      </SelectTrigger>
                      <SelectContent position='popper'>
                        <SelectItem value='01'>01</SelectItem>
                        <SelectItem value='02'>02</SelectItem>
                        <SelectItem value='03'>03</SelectItem>
                        <SelectItem value='04'>04</SelectItem>
                        <SelectItem value='05'>05</SelectItem>
                        <SelectItem value='06'>06</SelectItem>
                        <SelectItem value='07'>07</SelectItem>
                        <SelectItem value='08'>08</SelectItem>
                        <SelectItem value='09'>09</SelectItem>
                        <SelectItem value='10'>10</SelectItem>
                        <SelectItem value='11'>11</SelectItem>
                        <SelectItem value='12'>12</SelectItem>
                      </SelectContent>
                    </Select>
                    <Input placeholder='Last name' onChange={(e) => setLastName(e.target.value)} />
                    <Select onValueChange={(value: string) => setExpirationYear(value)}>
                      <SelectTrigger id='expiration-year'>
                        <SelectValue placeholder='Expiration year' />
                      </SelectTrigger>
                      <SelectContent position='popper'>
                        <SelectItem value='2023'>2023</SelectItem>
                        <SelectItem value='2024'>2024</SelectItem>
                        <SelectItem value='2025'>2025</SelectItem>
                        <SelectItem value='2026'>2026</SelectItem>
                        <SelectItem value='2027'>2027</SelectItem>
                        <SelectItem value='2028'>2028</SelectItem>
                        <SelectItem value='2029'>2029</SelectItem>
                        <SelectItem value='2030'>2030</SelectItem>
                      </SelectContent>
                    </Select>
                    <Input
                      placeholder='Security code'
                      type='text'
                      maxLength={4}
                      onChange={(e) => setSecurityCode(e.target.value)}
                    />
                  </div>
                  <div className='space-y-4'>
                    <h3 className='text-lg font-medium'>Billing address</h3>
                    <Input
                      placeholder='Country'
                      value={country}
                      onChange={(e) => setCountry(e.target.value)}
                    />
                    <Input
                      placeholder='Address line 1'
                      value={addressLine1}
                      onChange={(e) => setAddressLine1(e.target.value)}
                    />
                    <Input
                      placeholder='Address line 2 (optional)'
                      value={addressLine2}
                      onChange={(e) => setAddressLine2(e.target.value)}
                    />
                    <Input
                      placeholder='City'
                      value={city}
                      onChange={(e) => setCity(e.target.value)}
                    />
                    <Input
                      placeholder='Postal code (e.g., A1A 1A1)'
                      value={postalCode}
                      onChange={(e) => setPostalCode(e.target.value)}
                    />
                  </div>
                  <Button className='bg-apple-600 hover:bg-apple-700' type='submit'>
                    Save
                  </Button>
                </form>
              )}
            </CardContent>
          </Card>
        </div>
        <div className='w-1/3 p-4 space-y-6'>
          <Card className='w-full'>
            <CardHeader>
              <CardTitle>Consultation with Waleed Z.</CardTitle>
              <CardDescription>The time slot will be held for 10 minutes.</CardDescription>
            </CardHeader>
            <CardContent>
              <div className='space-y-2'>
                <div className='flex justify-between'>
                  <span className='text-sm'>{duration} min meeting</span>
                  <span className='text-sm'>${price.toFixed(2)}</span>
                </div>
                <div className='flex justify-between'>
                  <span className='text-sm'>{preBookedEventDetails && preBookedEventDetails.booking_data && formatDuration(
                    new Date(preBookedEventDetails.booking_data.start_time * 1000),
                    new Date(preBookedEventDetails.booking_data.end_time * 1000)
                  )}</span>
                  <Link className='text-blue-600 hover:underline text-sm' href='#'>
                    Edit
                  </Link>
                </div>
                <div className='flex justify-between'>
                  <span className='text-sm'>Project plan</span>
                  <CheckIcon className='text-apple-500' />
                </div>
                <div className='flex justify-between'>
                  <span className='text-sm'>Time and cost estimate</span>
                  <CheckIcon className='text-apple-500' />
                </div>
                <div className='flex justify-between'>
                  <span className='text-sm'>Meeting summary</span>
                  <CheckIcon className='text-apple-500' />
                </div>
                <div className='flex items-center justify-between'>
                  <span className='text-sm'>Have a promo code?</span>
                  <Button variant='outline'>Apply</Button>
                </div>
              </div>
              <hr className='m-4'/>
              <div className='flex justify-between'>
                <span className='text-sm'>Subtotal</span>
                <span className='text-sm'>$25.00</span>
              </div>
              <div className='flex justify-between'>
                <span className='text-sm'>Marketplace fee</span>
                <span className='text-sm'>$1.25</span>
              </div>
              <div className='flex justify-between'>
                <span className='text-sm'>Contract initiation fee</span>
                <span className='text-sm'>$4.95</span>
              </div>
              <div className='flex justify-between'>
                <span className='text-sm'>Estimated taxes</span>
                <span className='text-sm'>$0.93</span>
              </div>
              <div className='flex justify-between font-semibold'>
                <span className='text-sm'>Estimated total</span>
                <span className='text-sm'>$32.13</span>
              </div>
            </CardContent>
            <CardFooter className='flex flex-col space-y-2'>
              <div className='text-sm'>
                <Link className='text-blue-600 hover:underline' href='#'>
                  Learn about fees and estimated taxes
                </Link>
              </div>
              <Button
                className='bg-apple-600 hover:bg-apple-700'
                onClick={handleConfirmAndFund}
                disabled={confirmInProgress}
              >
                Confirm
              </Button>
            </CardFooter>
          </Card>
        </div>
      </div>
    </div>
  )
}

function CreditCardIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns='http://www.w3.org/2000/svg'
      width='24'
      height='24'
      viewBox='0 0 24 24'
      fill='none'
      stroke='currentColor'
      strokeWidth='2'
      strokeLinecap='round'
      strokeLinejoin='round'
    >
      <rect width='20' height='14' x='2' y='5' rx='2' />
      <line x1='2' x2='22' y1='10' y2='10' />
    </svg>
  )
}

function CheckIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns='http://www.w3.org/2000/svg'
      width='24'
      height='24'
      viewBox='0 0 24 24'
      fill='none'
      stroke='currentColor'
      strokeWidth='2'
      strokeLinecap='round'
      strokeLinejoin='round'
    >
      <polyline points='20 6 9 17 4 12' />
    </svg>
  )
}
